create schema if not exists tmm;

---------- TABLES CONTAINING LOOKUP DATA COMMON ACROSS NAMCs - START ---------------

--01. STKERCD  ccsb_error_codes
create table if not exists tmm.ccsb_error_codes (
error_code_id integer not null,
error_code varchar(5),
is_critical char(1),
message varchar(250),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_error_codes_pk primary key (error_code_id)
);


--02. STKINST  ccsb_inventory_statuses
create table if not exists tmm.ccsb_inventory_statuses (
status_id integer not null,
description varchar(20),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_inventory_statuses_pk primary key (status_id)
);


--03. STKJOBS  ccsb_jobs
create table if not exists tmm.ccsb_jobs (
job_code char(30) not null,
job_description varchar(75),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_jobs_pk primary key (job_code)
);


--04. STKJSCD  ccsb_job_status_codes
create table if not exists tmm.ccsb_job_status_codes (
status_code char(30) not null,
status_description char(30) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_job_status_codes_pk primary key (status_code)
);


--05. ccsb_namc
create table if not exists tmm.ccsb_namc(
namc_id char(2) not null,
name varchar(12) not null,
azure_namc_id char(3) not null,
description varchar(50) not null,
timezone varchar(10) not null,
unit_only_code char(1) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_namc_pk primary key (namc_id)
);


--06. STKVESC  ccsb_vehicle_source
create table if not exists tmm.ccsb_vehicle_source (
vehicle_source_id integer not null,
vehicle_source_desc varchar(40),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_vehicle_source_pk primary key (vehicle_source_id)
);


--07. ccsb_countdown_update_types
create table if not exists tmm.ccsb_countdown_update_types (
update_type_id integer not null,
name varchar(40) not null,
description varchar(40) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_countdown_update_types_pk primary key (update_type_id)
);

----------- TABLES CONTAINING LOOKUP DATA COMMON ACROSS NAMCs - END ----------------

----------------- TABLES CONTAINING NAMC SPECIFIC DATA - START ---------------------

--08. ccsb_bcdif_details
create table if not exists tmm.ccsb_bcdif_details (
namc_id char(2) not null,
file_id char(8) not null,
company_code char(5) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
constraint ccsb_bcdif_details_pk primary key (namc_id),
constraint ccsb_bcdif_details_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--09. STKADRO  ccsb_address_other
create table if not exists tmm.ccsb_address_other (
supplier char(7) not null,
dock char(2) not null,
part_no char(12) not null,
delivery_address char(10) not null,
namc_id char(2) not null,
attachment_address char(10),
store_address char(10),
kanban char(4) not null,
eff_start date,
eff_stop date,
other_address_1 char(10),
other_address_2 char(10),
other_address_3 char(10),
other_address_4 char(10),
other_address_5 char(10),
other_address_6 char(10),
other_address_7 char(10),
other_address_8 char(10),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_address_other_pk primary key (namc_id,supplier,dock,part_no,delivery_address),
constraint ccsb_address_other_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--10. STKBOUT  ccsb_buildout
create table if not exists tmm.ccsb_buildout (
buildout_id integer generated by default as identity ,
namc_id char(2) not null,
buildout_name varchar(50),
buildout_desc varchar(100),
model varchar(100),
buildout_start_date date,
buildout_end_date date,
is_unit_only char(1),
deleted_by varchar(100),
delete_timestamp timestamp,
latest_sv_date date,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_buildout_pk primary key (buildout_id),
constraint ccsb_buildout_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_buildout_idx1 on tmm.ccsb_buildout (buildout_end_date);
create unique index if not exists ccsb_buildout_idx2 on tmm.ccsb_buildout (namc_id,UPPER(buildout_name),coalesce (delete_timestamp,'01-01-2000'));


--11. STKDOCK  ccsb_dock_shop_map
create table if not exists tmm.ccsb_dock_shop_map (
dock_shop_id integer generated by default as identity ,
namc_id char(2) not null,
dock char(2),
alc_location char(1),
plant integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_dock_shop_map_pk primary key (dock_shop_id),
constraint ccsb_dock_shop_map_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create unique index if not exists ccsb_dock_shop_map_idx1 on tmm.ccsb_dock_shop_map (dock, alc_location, plant, coalesce (delete_timestamp,'01-01-2000'), namc_id);


--12. STKFYCD  ccsb_family_codes
create table if not exists tmm.ccsb_family_codes (
part_no varchar(12) not null,
dock char(2) not null,
namc_id char(2)not null,
family_code varchar(6) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
is_unit char(1) not null,
constraint ccsb_family_codes_pk primary key (namc_id,part_no,dock,family_code),
constraint ccsb_family_codes_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--13. STKGNQC  ccsb_galc_nqc
create table if not exists tmm.ccsb_galc_nqc (
refno char(10),
part_no char(12) not null,
dock char(2) not null,
namc_id char(2) not null,
user_code char(4),
car_family char(4),
basic_kata char(3),
source_code char(1),
line_number char(2),
shipping_parts_flag char(1),
owner_ship_comp char(2),
start_date char(8),
qty_sign char(1),
qty integer not null,
record_code char(2),
lo_date date,
urn char(10) default ' ',
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_galc_nqc_pk primary key (urn,part_no,dock),
constraint ccsb_galc_nqc_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_galc_nqc_idx1 on tmm.ccsb_galc_nqc (namc_id,part_no,dock);
create index if not exists ccsb_galc_nqc_idx2 on tmm.ccsb_galc_nqc (namc_id,dock);
create index if not exists ccsb_galc_nqc_idx3 on tmm.ccsb_galc_nqc (refno,namc_id,part_no,dock,qty);


--14. STKGSHP  ccsb_galc_shop
create table if not exists tmm.ccsb_galc_shop (
galc_shop_id integer generated by default as identity ,
tp char(2) not null,
shop char(10) not null,
last_update_timestamp timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
constraint ccsb_galc_shop_pk primary key (galc_shop_id)
);


--15. ccsb_namc_galc_shop_map
create table if not exists tmm.ccsb_namc_galc_shop_map(
galc_shop_id integer not null,
namc_id char(2) not null,
last_update_timestamp timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
constraint ccsb_namc_galc_shop_map_pk primary key (namc_id,galc_shop_id),
constraint ccsb_namc_galc_shop_map_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id),
constraint ccsb_namc_galc_shop_map_ccsb_galc_shop_fk foreign key (galc_shop_id) references tmm.ccsb_galc_shop(galc_shop_id)
);


--16. STKGSNP  ccsb_galc_snapshot
create table if not exists tmm.ccsb_galc_snapshot (
refno char(10) not null,
namc_id char(2) not null,
galc_vehicle_order integer not null,
ssn char(2),
lo_date char(8),
ctlkata char(20),
int_code char(4),
ext_code char(4),
spec95 char(1),
tp_name char(30),
show_seq integer,
proc_code char(2),
asmline char(1),
bdno char(5),
seqno char(5),
fix_asmseq char(10),
lasttp char(2),
lasttpdate timestamp,
present char(2),
vinno char(17),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
urn char(10) default ' ',
lastdate timestamp,
constraint ccsb_galc_snapshot_pk primary key (urn),
constraint ccsb_galc_snapshot_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_galc_snapshot_idx1 on tmm.ccsb_galc_snapshot (namc_id,galc_vehicle_order);
create index if not exists ccsb_galc_snapshot_idx2 on tmm.ccsb_galc_snapshot (namc_id,bdno);
create index if not exists ccsb_galc_snapshot_idx3 on tmm.ccsb_galc_snapshot (namc_id,asmline);
create index if not exists ccsb_galc_snapshot_idx4 on tmm.ccsb_galc_snapshot (namc_id,lasttp);
create index if not exists ccsb_galc_snapshot_idx5 on tmm.ccsb_galc_snapshot (namc_id,spec95,ssn);


--17. STKSOLD  ccsb_galc_vehicles_sold
create table if not exists tmm.ccsb_galc_vehicles_sold (
refno char(10) not null,
namc_id char(2) not null,
galc_vehicle_order integer not null,
ssn char(2),
lo_date char(8),
ctlkata char(20),
int_code char(4),
ext_code char(4),
spec95 char(1),
tp_name char(30),
show_seq integer,
proc_code char(2),
asmline char(1),
bdno char(5),
seqno char(5),
fix_asmseq char(10),
lasttp char(2),
lasttpdate timestamp,
present char(2),
vinno char(17),
urn char(10) default ' ',
lastdate timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_galc_vehicles_sold_pk primary key (urn),
constraint ccsb_galc_vehicles_sold_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_galc_vehicles_sold_idx1 on tmm.ccsb_galc_vehicles_sold (namc_id, galc_vehicle_order);
create index if not exists ccsb_galc_vehicles_sold_idx2 on tmm.ccsb_galc_vehicles_sold (namc_id, bdno);
create index if not exists ccsb_galc_vehicles_sold_idx3 on tmm.ccsb_galc_vehicles_sold (namc_id, asmline);
create index if not exists ccsb_galc_vehicles_sold_idx4 on tmm.ccsb_galc_vehicles_sold (namc_id, lasttp);
create index if not exists ccsb_galc_vehicles_sold_idx5 on tmm.ccsb_galc_vehicles_sold (namc_id, spec95,ssn);


--18. STKGSRP  ccsb_global_safety_repository
create table if not exists tmm.ccsb_global_safety_repository (
global_safety_repo_id integer generated by default as identity ,
namc_id char(2) not null,
supplier varchar(7) not null,
dock char(2) not null,
"part" varchar(12) not null,
kanban varchar(4) not null,
safety integer,
"rank" varchar(2),
"audit" char(1),
last_updated_by varchar(25),
last_update_timestamp timestamp,
notes varchar(25),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_global_safety_repository_pk primary key (global_safety_repo_id),
constraint ccsb_global_safety_repository_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create unique index if not exists ccsb_global_safety_repository_idx1 on tmm.ccsb_global_safety_repository (namc_id,supplier,upper(dock),upper("part"),coalesce (delete_timestamp,'01-01-2000'));
create index if not exists ccsb_global_safety_repository_idx2 ON tmm.ccsb_global_safety_repository (namc_id, supplier, dock, part, kanban);


--19. STKSUSP  ccsb_gsnp_job_suspend_status
create table if not exists tmm.ccsb_gsnp_job_suspend_status (
suspend_galc_snapshot_id integer generated by default as identity ,
namc_id char(2) not null,
suspend_flag char(1),
"timestamp" timestamp,
vecl_load_date date,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
constraint ccsb_gsnp_job_suspend_status_pk primary key (suspend_galc_snapshot_id),
constraint ccsb_gsnp_job_suspend_status_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--20. STKINGR  ccsb_inventory_groups
create table if not exists tmm.ccsb_inventory_groups (
inventory_group_id integer generated by default as identity ,
namc_id char(2) not null,
inventory_group_name varchar(50) not null,
parts_per_page integer,
bodyno_required char(1),
inventory_count_req char(1),
store char(1) default 'n',
lsa char(1) default 'n',
inventory_adjustment char(1),
other_adr1 char(1) default 'n',
other_adr2 char(1) default 'n',
other_adr3 char(1) default 'n',
other_adr4 char(1) default 'n',
other_adr5 char(1) default 'n',
other_adr6 char(1) default 'n',
other_adr7 char(1) default 'n',
other_adr8 char(1) default 'n',
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_inventory_groups_pk primary key (inventory_group_id),
constraint ccsb_inventory_groups_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create unique index if not exists ccsb_inventory_groups_idx1 on tmm.ccsb_inventory_groups (namc_id,upper(inventory_group_name),coalesce (delete_timestamp,'01-01-2000'));


--21. STKINGC  ccsb_inventory_group_criteria
create table if not exists tmm.ccsb_inventory_group_criteria (
inventory_group_id integer not null,
defn_type char(1) not null,
display_order integer not null,
paranthesis char(1),
field varchar(50),
operator varchar(10),
value varchar(20),
inv_condition varchar(5),
sort_order char(1),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100), 
delete_timestamp timestamp, 
constraint ccsb_inventory_group_criteria_pk primary key (inventory_group_id,defn_type,display_order),
constraint ccsb_inventory_group_criteria_ccsb_inventory_groups_fk foreign key (inventory_group_id) references tmm.ccsb_inventory_groups (inventory_group_id)
);


--22. STKJBST  ccsb_job_details
create table if not exists tmm.ccsb_job_details (
job_detail_id integer generated by default as identity ,
namc_id char(2) not null,
job_code char(30) not null,
job_description varchar(100),
line_number char(2),
display_order integer,
schedule varchar(50) not null,
current_status varchar(30) default 'ACTIVE' not null,
start_timestamp timestamp,
end_timestamp timestamp,
delayed char(1) default 'n' not null,
display_flag char(1) default 'Y' not null,
success_notification char(1) default 'N' not null,
failure_notification char(1) default 'Y' not null,
delayed_notification char(1) default 'Y' not null,
nodata_notification char(1) default 'Y' not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_job_details_pk primary key (job_detail_id),
constraint ccsb_job_details_ccsb_jobs_fk foreign key (job_code) references tmm.ccsb_jobs (job_code),
constraint ccsb_job_details_ccsb_job_status_codes_fk foreign key (current_status) references tmm.ccsb_job_status_codes (status_code),
constraint ccsb_job_details_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--23. STKMONT  ccsb_monitoring
create table if not exists tmm.ccsb_monitoring (
namc_id char(2) not null,
monitoring_id integer generated by default as identity ,
buss_entity char(2),
asml_line char(1),
dw_date char(8),
ccs_date char(8),
galc_date char(8),
dw_count char(10),
ccs_count char(10),
error_msg char(100),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_monitoring_pk primary key (monitoring_id),
constraint ccsb_monitoring_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--24. STKOBSO  ccsb_obsolescence
create table if not exists tmm.ccsb_obsolescence (
obso_part_id integer generated by default as identity ,
namc_id char(2) not null,
buildout_date date,
buildout_desc varchar(100),
"user" varchar(100),
supplier varchar(7),
dock char(2),
part_no varchar(12),
kanban varchar(4),
target_obso_pieces integer,
actual_obso_pieces integer,
target_obso_price double precision,
actual_obso_price double precision,
piece_price double precision,
"comment" varchar(100),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_obsolescence_pk primary key (obso_part_id),
constraint ccsb_obsolescence_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_obsolescence_idx1 on tmm.ccsb_obsolescence(namc_id);


--25. STKOCON  ccsb_overseas_container
create table if not exists tmm.ccsb_overseas_container (
container varchar(5) not null,
namc_id char(2) not null,
ordcode varchar(5),
vessel varchar(8),
shipco varchar(10),
tapflag varchar(1),
vandate varchar(6),
estport varchar(6),
estgtn varchar(6),
actgtn varchar(6),
devdate varchar(6),
devanned varchar(1),
seal_broke varchar(1),
seal_num varchar(12),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_overseas_container_pk primary key (container,namc_id),
constraint ccsb_overseas_container_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_overseas_container_idx1 on tmm.ccsb_overseas_container (devanned);


--26. STKOPRT  ccsb_overseas_parts
create table if not exists tmm.ccsb_overseas_parts (
container varchar(5) not null,
namc_id char(2) not null,
module varchar(5) not null,
mod_devdate varchar(6),
part_no varchar(12) not null,
qty integer,
tapdate varchar(6),
tap_qty integer,
taptime varchar(6),
sup_cd varchar(5),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_overseas_parts_pk primary key (container,module,part_no),
constraint ccsb_overseas_parts_ccsb_overseas_container_fk foreign key (container, namc_id) references tmm.ccsb_overseas_container (container, namc_id),
constraint ccsb_overseas_parts_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);


--27. STKOTMC  ccsb_overseas_tmc
create table if not exists tmm.ccsb_overseas_tmc (
tmc_id integer generated by default as identity,
part_no varchar(12) not null,
container varchar(5) not null,
namc_id char(2) not null,
qty integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_overseas_tmc_pk primary key (tmc_id),
constraint ccsb_overseas_tmc_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create unique index if not exists ccsb_overseas_tmc_idx1 on tmm.ccsb_overseas_tmc(part_no,container,namc_id,coalesce (delete_timestamp,'01-01-2000'));


--28. STKPPCS  ccsb_partial_piece_count
create table if not exists tmm.ccsb_partial_piece_count (
criteria_definition_id integer generated by default as identity,
criteria_name varchar(50) not null,
display_order integer not null,
namc_id char(2) not null,
paranthesis char(1),
field varchar(50) not null,
operator varchar(10) not null,
value varchar(20) not null,
inv_condition varchar(5),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_partial_piece_count_pk primary key (criteria_definition_id),
constraint ccsb_partial_piece_count_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create unique index if not exists ccsb_partial_piece_count_idx1 on tmm.ccsb_partial_piece_count (namc_id,display_order, coalesce (delete_timestamp,'01-01-2000'));


--29. STKNQCS  ccsb_pass_nqc_summary
create table if not exists tmm.ccsb_pass_nqc_summary (
part_no char(12) not null,
dock char(2) not null,
namc_id char(2) not null,
record_code char(2),
source_code char(1),
line_off_date char(8) not null,
daily_range char(2),
daily_quantity integer not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
line_number char(2),
constraint ccsb_pass_nqc_summary_pk primary key (namc_id,part_no,dock,line_off_date),
constraint ccsb_pass_nqc_summary_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

--30. ccsb_pass_nqc_summary_temp
create table if not exists tmm.ccsb_pass_nqc_summary_temp (
part_no char(12) not null,
dock char(2) not null,
namc_id char(2) not null,
record_code char(2),
source_code char(1),
line_off_date char(8) not null,
daily_range char(2),
daily_quantity integer not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
line_number char(2),
constraint ccsb_pass_nqc_summary_temp_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc(namc_id)
);

create unique index if not exists ccsb_pass_nqc_summary_temp_idx1 ON tmm.ccsb_pass_nqc_summary_temp (namc_id, part_no, dock, line_off_date, coalesce(line_number, '  '));
create index if not exists ccsb_pass_nqc_summary_temp_idx2 ON tmm.ccsb_pass_nqc_summary_temp (namc_id,line_number,part_no,dock);


--31. STKPCNT  ccsb_piece_count
create table if not exists tmm.ccsb_piece_count (
piece_count_id integer generated by default as identity,
namc_id char(2) not null,
kanban varchar(4),
dock char(2),
supplier varchar(7),
part_no varchar(12),
body_no varchar(250),
inventory_count integer,
last_unload varchar(12),
safety integer,
ir_vehicle integer,
aoc integer,
in_transit integer,
inv_result integer,
adjustment integer,
final_countdown integer,
container_to varchar(5),
container_code varchar(2),
broadcast_seq char(3),
ir_non_vehicle integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
ir_pass integer,
ir_alc integer,
expected_countdown integer default 0 not null,
constraint ccsb_piece_count_pk primary key (piece_count_id),
constraint ccsb_piece_count_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_piece_count_idx1 on tmm.ccsb_piece_count (namc_id, supplier);
create index if not exists ccsb_piece_count_idx2 on tmm.ccsb_piece_count (namc_id,last_unload);
create index if not exists ccsb_piece_count_idx3 on tmm.ccsb_piece_count (namc_id,part_no);
create index if not exists ccsb_piece_count_idx4 on tmm.ccsb_piece_count (namc_id,dock);
create index if not exists ccsb_piece_count_idx5 on tmm.ccsb_piece_count (namc_id,kanban,body_no);
create unique index if not exists ccsb_piece_count_idx6 on tmm.ccsb_piece_count (namc_id,kanban,dock,supplier,part_no,coalesce (delete_timestamp,'01-01-2000'),inserted_by);


--32. STKSPRQ  ccsb_service_parts_requirement
create table if not exists tmm.ccsb_service_parts_requirement (
requirement_id integer generated by default as identity ,
namc_id char(2) not null,
supplier char(7) not null,
dock char(2) not null,
"part" char(12) not null,
prod_date date,
quantity integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_service_parts_requirement_pk primary key (requirement_id),
constraint ccsb_service_parts_requirement_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_service_parts_requirement_idx1 on tmm.ccsb_service_parts_requirement (namc_id);


--33. STKSPCT  ccsb_supplier_contacts
create table if not exists tmm.ccsb_supplier_contacts (
supplier_contact_id integer generated by default as identity ,
supplier_email varchar(100) not null,
supplier varchar(7),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_supplier_contacts_pk primary key (supplier_contact_id)
);


--34. ccsb_namc_supplier_contacts_map 
create table if not exists tmm.ccsb_namc_supplier_contacts_map(
supplier_contact_id integer not null,
namc_id char(2) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_namc_supplier_contacts_map_pk primary key (supplier_contact_id,namc_id),
constraint ccsb_namc_supplier_contacts_map_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id),
constraint ccsb_namc_supplier_contacts_map_ccsb_supplier_contacts_fk foreign key (supplier_contact_id) references tmm.ccsb_supplier_contacts (supplier_contact_id)
);


--35. STKVECL  ccsb_vehicle
create table if not exists tmm.ccsb_vehicle (
refno char(10) not null,
namc_id char(2) not null,
vehicle_source_id integer not null,
spec200 char(200),
lo_date char(8),
line_number char(2),
ssn char(2),
ext_code char(4),
int_code char(4),
ctlkata char(20),
seqno char(5),
bdno char(5),
prod_week char(4),
model_year char(2),
katashiki char(20),
urn char(10) default ' ',
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_vehicle_pk primary key (urn),
constraint ccsb_vehicle_ccsb_vehicle_source_fk foreign key (vehicle_source_id) references tmm.ccsb_vehicle_source (vehicle_source_id) on delete restrict,
constraint ccsb_vehicle_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

create index if not exists ccsb_vehicle_idx1 on tmm.ccsb_vehicle (namc_id,vehicle_source_id);


--36. ccsb_napipe_ordr_cnt
create table if not exists tmm.ccsb_napipe_ordr_cnt (
napipe_ordr_cnt_id integer generated by default as identity,
namc_id char(2) not null,
load_date timestamp not null,
purordr_cnt integer,
puritem_cnt integer,
purlgst_cnt integer,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_napipe_ordr_cnt_pk primary key (napipe_ordr_cnt_id),
constraint ccsb_napipe_ordr_cnt_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)
);

------------------ TABLES CONTAINING NAMC SPECIFIC DATA - END ----------------------

--------------- TABLES CONTAINING INVENTORY SPECIFIC DATA - START ------------------

--37. STKINTY  ccsb_inventory
create table if not exists tmm.ccsb_inventory(
buildout_id integer not null,
inventory_id integer generated by default as identity ,
namc_id char(2) not null,
inventory_name varchar(50),
inventory_desc varchar(100),
status_id integer not null,
inv_grp_update char(1),
inventory_start_date date,
inventory_end_date date,
last_update_timestamp timestamp,
alc_last_scan timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
last_updated_by varchar(25),
parent_inventory integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
constraint ccsb_inventory_pk primary key (inventory_id),
constraint ccsb_inventory_ccsb_buildout_fk foreign key (buildout_id) references tmm.ccsb_buildout (buildout_id) on delete cascade,
constraint ccsb_inventory_ccsb_inventory_statuses_fk foreign key (status_id) references tmm.ccsb_inventory_statuses (status_id),
constraint ccsb_inventory_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id)

);

create index if not exists ccsb_inventory_idx1 on tmm.ccsb_inventory (status_id);
create unique index if not exists ccsb_inventory_idx2 on tmm.ccsb_inventory (buildout_id,upper(inventory_name),coalesce(delete_timestamp,'01-01-2000'));


--38. STKBERR  ccsb_body_num_errors
create table if not exists tmm.ccsb_body_num_errors (
body_num_error_id integer generated by default as identity,
inventory_id integer not null,
inventory_count_input_id integer not null,
supplier varchar(7),
dock char(2),
part_no varchar(12),
count_sheet varchar(56),
kanban varchar(4),
body_no_1 varchar(5),
body_no_2 varchar(5),
description_1 varchar(100),
description_2 varchar(100),
input_1_userid varchar(25),
input_2_userid varchar(25),
input_1_time timestamp,
input_2_time timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_body_num_errors_pk primary key (body_num_error_id),
constraint ccsb_body_num_errors_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--39. STKCMAT  ccsb_common_attachments
create table if not exists tmm.ccsb_common_attachments (
common_attachments_id integer generated by default as identity ,
inventory_id integer not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
attachment_location varchar(250) not null,
constraint ccsb_common_attachments_pk primary key (common_attachments_id),
constraint ccsb_common_attachments_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--40. STKBTAG  ccsb_countdown_calc
create table if not exists tmm.ccsb_countdown_calc (
inventory_tag_batch_id integer generated by default as identity ,
inventory_id integer not null,
supplier varchar(7),
dock char(2),
part_no varchar(12),
kanban varchar(4),
"rank" varchar(5),
last_unload varchar(12),
countdown_date date,
team_member varchar(5),
body_no varchar(250),
ir_pass integer,
ir_alc integer,
ir_non_vehicle integer,
aoc integer,
inventory_count integer,
overflow integer,
osc_dock integer,
in_transit integer,
tmc_pipeline integer,
safety integer,
adjustment integer,
inv_result integer,
final_countdown integer,
apply_requirement_flag char(1),
broadcast_seq char(3),
container_code varchar(2),
ir_unit integer,
expected_countdown integer default 0 not null,
adjusted_inv_count integer,
is_activated char(1) default '0',
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_countdown_calc_pk primary key (inventory_tag_batch_id),
constraint inventory_tag_batch_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create unique index if not exists ccsb_countdown_calc_idx1 on tmm.ccsb_countdown_calc (inventory_id,supplier,dock,part_no);
create index if not exists ccsb_countdown_calc_idx2 on tmm.ccsb_countdown_calc (inventory_id);
create index if not exists ccsb_countdown_calc_idx3 on tmm.ccsb_countdown_calc (dock);
create index if not exists ccsb_countdown_calc_idx4 on tmm.ccsb_countdown_calc (supplier);
create index if not exists ccsb_countdown_calc_idx5 on tmm.ccsb_countdown_calc (part_no);
create index if not exists ccsb_countdown_calc_container_code_idx on tmm.ccsb_countdown_calc (container_code);


--41. STKARCH  ccsb_countdown_data
create table if not exists tmm.ccsb_countdown_data (
archive_id integer generated by default as identity ,
inventory_id integer not null,
namc_id char(2) not null,
dock char(2),
supplier varchar(7),
part_no varchar(12),
kanban varchar(4),
user_id varchar(25),
adjustment integer,
countdown integer,
update_type_id integer not null,
orderno_from char(12),
orderno_to char(12),
manifest_to char(12),
manifest_from char(12),
is_init_countdown char(1),
is_req_change_apply char(1),
container_code char(1),
fraction_flag integer,
last_orderno char(12),
last_manifestno char(12),
remarks varchar(250),
delete_status char(1) default 'N' not null,
delete_timestamp timestamp,
delete_user varchar(25),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_countdown_data_pk primary key (archive_id),
constraint ccsb_countdown_data_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id),
constraint ccsb_countdown_data_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id),
constraint ccsb_countdown_data_ccsb_countdown_update_types_fk foreign key (update_type_id) references tmm.ccsb_countdown_update_types(update_type_id)
);

create index if not exists ccsb_countdown_data_idx1 on tmm.ccsb_countdown_data (inventory_id);
create index if not exists ccsb_countdown_data_idx2 on tmm.ccsb_countdown_data (part_no,supplier,dock);


--42. STKCDST  ccsb_countdown_status
create table if not exists tmm.ccsb_countdown_status (
status_id integer generated by default as identity ,
bot_file_created char(1),
countdown_timestamp timestamp,
bot_file_timestamp timestamp,
alc_last_scan timestamp,
active_eff_date date,
inventory_id integer,
eknbn_file_date date,
bvc_file_timestamp timestamp,
bvc_reset_required char(1),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_countdown_status_pk primary key (status_id),
constraint ccsb_countdown_status_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--43. STKDISC ccsb_count_input_disc
create table if not exists tmm.ccsb_count_input_disc (
discrepancy_id integer generated by default as identity,
inventory_count_input_id integer not null,
inventory_id integer not null,
supplier varchar(7) not null,
dock char(2) not null,
part_no varchar(12) not null,
count_sheet varchar(55) not null,
kanban varchar(4),
body_discrepancy char(1),
total_pieces_discrepancy char(1),
body_no_1 varchar(5),
body_no_2 varchar(5),
total_pieces_1 char(10),
total_pieces_2 char(10),
input_1_userid varchar(25),
input_2_userid varchar(25),
input_1_time timestamp,
input_2_time timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_count_input_disc_pk primary key (discrepancy_id),
constraint ccsb_count_input_disc_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--44. STKMSGS  ccsb_email_messages
create table if not exists tmm.ccsb_email_messages (
supplier_email_messages_id integer generated by default as identity ,
inventory_id integer not null,
message varchar(250),
subject varchar(100),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_email_messages_pk primary key (supplier_email_messages_id),
constraint ccsb_email_messages_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id) on delete restrict
);


--45. STKSEAT  ccsb_supplier_attachments
create table if not exists tmm.ccsb_supplier_attachments (
supplier_email_messages_id integer not null,
supplier varchar(7) not null,
attachment_location varchar(100) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_supplier_attachments_pk primary key (supplier_email_messages_id,supplier),
constraint ccsb_supplier_attachments_ccsb_email_messages_fk foreign key (supplier_email_messages_id) references tmm.ccsb_email_messages (supplier_email_messages_id)
);


--46. STKEROR  ccsb_errors
create table if not exists tmm.ccsb_errors (
error_id integer generated by default as identity ,
inventory_id integer not null,
error_code_id integer not null,
dock char(2),
supplier varchar(7),
part_no varchar(12),
kanban varchar(4),
errors_acknowledged char(1),
user_acknowledged varchar(25),
acknowledged_timestamp timestamp,
team_member varchar(5),
gap_desc varchar(50),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_errors_pk primary key (error_id),
constraint ccsb_errors_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id),
constraint ccsb_errors_ccsb_error_codes_fk foreign key (error_code_id) references tmm.ccsb_error_codes (error_code_id)
);


--47. STKINDT  ccsb_intransit_data_timestamp
create table if not exists tmm.ccsb_intransit_data_timestamp (
inventory_id integer not null,
eknbn_timestamp timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_intransit_data_timestamp_pk primary key (inventory_id),
constraint ccsb_intransit_data_timestamp_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--48. STKITST  ccsb_intransit_status
create table if not exists tmm.ccsb_intransit_status (
inventory_id integer not null,
na_input_status char(1),
os_input_status char(1),
na_last_order_status char(1),
in_transit_status char(1),
broadcast_status char(1),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_intransit_status_pk primary key (inventory_id),
constraint ccsb_intransit_status_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--49. STKINCI  ccsb_inventory_counts_input
create table if not exists tmm.ccsb_inventory_counts_input (
inventory_count_input_id integer generated by default as identity ,
inventory_id integer not null,
inventory_count_sheet_id integer default 1 not null,
user_id_1 char(25),
user_id_2 char(25),
supplier char(7),
dock char(2),
part_no char(12),
kanban char(4),
qpc integer,
full_container_1 char(10),
full_container_2 char(10),
partial_container_1 char(10),
partial_container_2 char(10),
body_no_1 char(5),
body_no_2 char(5),
total_pieces_1 char(10),
total_pieces_2 char(10),
store char(10),
lsa char(12),
delivery_route char(5),
line_group char(5),
input_time_1 timestamp,
input_time_2 timestamp,
sort_order integer default 1 not null,
inventory_group_name varchar(50) default 'UnAssigned' not null,
bodyno_required char(1),
inventory_count_req char(1),
delivery_route_sec char(5),
part_description varchar(50),
other_address varchar(10),
block_partial_pieces char(1) default 'n' not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_inventory_counts_input_pk primary key (inventory_count_input_id),
constraint ccsb_inventory_counts_input_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id) on delete restrict
);

create index if not exists ccsb_inventory_counts_input_idx1 on tmm.ccsb_inventory_counts_input (body_no_1);
create index if not exists ccsb_inventory_counts_input_idx2 on tmm.ccsb_inventory_counts_input (part_no,dock,supplier);
create index if not exists ccsb_inventory_counts_input_idx4 on tmm.ccsb_inventory_counts_input (inventory_id,inventory_count_sheet_id);
create index if not exists ccsb_inventory_counts_input_idx5 on tmm.ccsb_inventory_counts_input (sort_order);
create unique index if not exists ccsb_inventory_counts_input_idx3 on tmm.ccsb_inventory_counts_input (dock,inventory_id,lsa,part_no,store,supplier,other_address,inventory_group_name,sort_order);


--50. STKPART  ccsb_inventory_parts
create table if not exists tmm.ccsb_inventory_parts (
part_selection_id integer generated by default as identity ,
kanban varchar(4),
dock char(2) not null,
supplier varchar(7) not null,
part_no varchar(12) not null,
inventory_id integer not null,
lsa varchar(12),
qpc integer,
team_member varchar(5),
part_description varchar(50),
store varchar(10),
order_method varchar(1),
del_route_prim varchar(5),
del_route_sec varchar(5),
line_group varchar(5),
"rank" varchar(5),
inv_audit char(1),
container_code varchar(2),
new_parts char(1),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
other_address_1 varchar(10),
other_address_2 varchar(10),
other_address_3 varchar(10),
other_address_4 varchar(10),
other_address_5 varchar(10),
other_address_6 varchar(10),
other_address_7 varchar(10),
other_address_8 varchar(10),
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_inventory_parts_pk primary key (part_selection_id),
constraint ccsb_inventory_parts_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id) on delete cascade
);

create unique index if not exists ccsb_inventory_parts_idx1 on tmm.ccsb_inventory_parts (part_no,supplier,dock,coalesce(lsa,''),inventory_id,coalesce (delete_timestamp,'01-01-2000'));
CREATE INDEX ccsb_inventory_parts_order_method_idx ON tmm.ccsb_inventory_parts (order_method);

--51. STKNALO  ccsb_na_last_orders
create table if not exists tmm.ccsb_na_last_orders (
na_last_orders_id integer generated by default as identity,
inventory_id integer not null,
supplier varchar(7) not null,
dock char(2) not null,
route varchar(6) not null,
order_no char(12) not null,
prev_order_no char(12),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_na_last_orders_pk primary key (na_last_orders_id ),
constraint ccsb_na_last_orders_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id) on delete restrict
);

create unique index if not exists ccsb_na_last_orders_idx1 on tmm.ccsb_na_last_orders (inventory_id,supplier,dock,route,order_no,coalesce (delete_timestamp,'01-01-2000'));


--52. STKNAOR  ccsb_na_orders
create table if not exists tmm.ccsb_na_orders (
na_orders_id integer generated by default as identity,
inventory_id integer not null,
supplier varchar(7) not null,
dock char(2) not null,
part_no varchar(12) not null,
route varchar(6) not null,
mr_seq varchar(2) not null,
order_no integer not null,
manifest_module varchar(12) not null,
kanban varchar(4),
quantity integer,
planned_unload_dt timestamp,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_na_orders_pk primary key (na_orders_id),
constraint ccsb_na_orders_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create unique index if not exists ccsb_na_orders_idx1 on tmm.ccsb_na_orders (inventory_id,supplier,dock,part_no,route,mr_seq,order_no,manifest_module,coalesce (delete_timestamp,'01-01-2000'));


--53. STKNART  ccsb_na_routes
create table if not exists tmm.ccsb_na_routes (
in_transit_routes_id integer generated by default as identity ,
inventory_id integer not null,
dock char(2),
route varchar(6),
unload_date char(8),
mr_seq varchar(2),
mr_frequency integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_na_routes_pk primary key (in_transit_routes_id),
constraint ccsb_na_routes_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create index if not exists ccsb_na_routes_idx1 on tmm.ccsb_na_routes (inventory_id);
create index if not exists ccsb_na_routes_idx2 on tmm.ccsb_na_routes (unload_date,mr_seq);
create index if not exists ccsb_na_routes_dock_idx on tmm.ccsb_na_routes (dock, route);


--54. STKOSDK  ccsb_overseas_dock
create table if not exists tmm.ccsb_overseas_dock (
osc_dock_id integer generated by default as identity ,
inventory_id integer not null,
dock char(2),
supplier varchar(7),
renban varchar(5),
module varchar(5),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_overseas_dock_pk primary key (osc_dock_id),
constraint ccsb_overseas_dock_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create index if not exists ccsb_overseas_dock_idx1 on tmm.ccsb_overseas_dock (inventory_id);
create unique index if not exists ccsb_overseas_dock_idx2 on tmm.ccsb_overseas_dock (inventory_id,supplier,renban,module,coalesce (delete_timestamp,'01-01-2000'));


--55. STKOSIT  ccsb_overseas_intransit
create table if not exists tmm.ccsb_overseas_intransit (
in_transit_ospipeline_id integer generated by default as identity ,
inventory_id integer not null,
container_code varchar(2),
container_last_unload varchar(5),
container_to varchar(5),
gap_in_pipeline char(1),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_overseas_intransit_pk primary key (in_transit_ospipeline_id),
constraint ccsb_overseas_intransit_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create index if not exists ccsb_overseas_intransit_idx1 on tmm.ccsb_overseas_intransit (inventory_id,container_code);
create index if not exists ccsb_overseas_intransit_idx2 on tmm.ccsb_overseas_intransit (container_last_unload,container_to);


--56. STKOSIN  ccsb_overseas_inventory
create table if not exists tmm.ccsb_overseas_inventory (
osc_inventory_id integer generated by default as identity ,
inventory_id integer not null,
supplier varchar(7),
dock char(2),
part_no varchar(12),
kanban varchar(4),
renban varchar(5),
quantity integer,
module varchar(5),
est_arrival varchar(6),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_overseas_inventory_pk primary key (osc_inventory_id),
constraint ccsb_overseas_inventory_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create index if not exists ccsb_overseas_inventory_idx1 on tmm.ccsb_overseas_inventory (inventory_id);


--57. STKOSOR  ccsb_overseas_orders
create table if not exists tmm.ccsb_overseas_orders (
osc_orders_id integer generated by default as identity, 
inventory_id integer not null,
supplier varchar(7) not null,
dock char(2) not null,
part_no varchar(12) not null,
container varchar(5) not null,
manifest_module varchar(12) not null,
kanban varchar(4),
quantity integer,
planned_unload_dt char(6),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_overseas_orders_pk primary key (osc_orders_id),
constraint ccsb_overseas_orders_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--58. STKPTCR  ccsb_parts_criteria
create table if not exists tmm.ccsb_parts_criteria (
part_criteria_id integer generated by default as identity ,
inventory_id integer not null,
select_family_code varchar(4),
eff_stop date,
part_type varchar(25),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_parts_criteria_pk primary key (part_criteria_id),
constraint ccsb_parts_criteria_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);


--59. STKPRTN  ccsb_parts_selection_calc
create table if not exists tmm.ccsb_parts_selection_calc (
part_selection_id integer not null,
part_selection_calc_id integer generated by default as identity ,
inventory_id integer not null,
inv_group_name varchar(50),
lsa varchar(12),
store varchar(10),
other varchar(10),
other_adr_index integer,
constraint ccsb_parts_selection_calc_ccsb_inventory_parts_fk foreign key (part_selection_id) references tmm.ccsb_inventory_parts (part_selection_id),
constraint ccsb_parts_selection_calc_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)

);

create index if not exists ccsb_parts_selection_calc_idx1 on tmm.ccsb_parts_selection_calc (part_selection_id,inventory_id,inv_group_name);


--60. STKUNGI  ccsb_unit_gentani_id
create table if not exists tmm.ccsb_unit_gentani_id (
unit_gentani_id integer generated by default as identity ,
inventory_id integer not null,
line varchar(10),
parent_part varchar(12),
child_part varchar(12),
quantity integer,
line_position integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_unit_gentani_id_pk primary key (unit_gentani_id),
constraint ccsb_unit_gentani_id_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory (inventory_id)
);

create unique index if not exists ccsb_unit_gentani_id_idx1 on tmm.ccsb_unit_gentani_id (inventory_id,UPPER(parent_part),UPPER(child_part),coalesce (delete_timestamp,'01-01-2000'));
create index if not exists ccsb_unit_gentani_id_idx2 on tmm.ccsb_unit_gentani_id (line_position,quantity);


--61. STKUNLI  ccsb_unit_line_inventory
create table if not exists tmm.ccsb_unit_line_inventory (
unit_line_inventory_id integer generated by default as identity ,
inventory_id integer not null,
line varchar(10),
line_position integer,
parent_part varchar(12),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_unit_line_inventory_pk primary key (unit_line_inventory_id),
constraint ccsb_unit_line_inventory_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory(inventory_id)
);

create index if not exists ccsb_unit_line_inventory_idx1 on tmm.ccsb_unit_line_inventory (inventory_id,line_position,parent_part);
create unique index if not exists ccsb_unit_line_inventory_idx2 on tmm.ccsb_unit_line_inventory (inventory_id,line_position,UPPER(parent_part),coalesce (delete_timestamp,'01-01-2000'));


--62. STKUNRM  ccsb_units_remaining
create table if not exists tmm.ccsb_units_remaining (
units_remaining_id integer generated by default as identity ,
inventory_id integer not null,
parent_part varchar(12),
line varchar(10),
rtb integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
deleted_by varchar(100),
delete_timestamp timestamp,
constraint ccsb_units_remaining_pk primary key (units_remaining_id),
constraint ccsb_units_remaining_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory(inventory_id)
);

create index if not exists ccsb_units_remaining_idx1 on tmm.ccsb_units_remaining (inventory_id,parent_part);
create unique index if not exists ccsb_units_remaining_idx2 on tmm.ccsb_units_remaining (inventory_id,UPPER(parent_part),coalesce (delete_timestamp,'01-01-2000'));


--63. STKWARN  ccsb_warnings
create table if not exists tmm.ccsb_warnings(
warning_message_id integer generated by default as identity ,
inventory_id integer not null,
subject varchar(100),
message varchar(250) not null,
emailid varchar(1000) not null,
attachment_location varchar(250) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_warnings_pk primary key (warning_message_id),
constraint ccsb_warnings_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory(inventory_id)
);


--64. ccsb_inventory_group_part_map
create table if not exists tmm.ccsb_inventory_group_part_map(
inventory_group_id integer not null,
part_selection_id integer not null,
constraint ccsb_inventory_group_part_map_pk primary key (inventory_group_id,part_selection_id),
constraint ccsb_inventory_group_part_map_ccsb_inventory_groups_fk foreign key (inventory_group_id) references tmm.ccsb_inventory_groups(inventory_group_id),
constraint ccsb_inventory_group_part_map_ccsb_inventory_parts_fk foreign key (part_selection_id) references tmm.ccsb_inventory_parts(part_selection_id)
);


--65. ccsb_request_status
create table if not exists tmm.ccsb_request_status(
request_id char(20) not null,
business_functionality varchar(20) not null,
inventory_id integer,
request_status varchar(12) not null,
error_message varchar(500),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsb_warnings_ccsb_inventory_fk foreign key (inventory_id) references tmm.ccsb_inventory(inventory_id)
);

---------------- TABLES CONTAINING INVENTORY SPECIFIC DATA - END -------------------

----------------  RUNDOWN TABLES - START ----------------------------

--66. STKRPRT  ccsr_parts
create table if not exists tmm.ccsr_parts(
part_id integer generated by default as identity,
namc_id char(2) not null,
dock char(2) not null,
supplier varchar(7) not null,
part_no varchar(12) not null,
kanban varchar(4),
minimum_inventory integer,
maximum_inventory integer,
eci char(1) default 'n' not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
token char(40),
constraint ccsr_parts_pk primary key (part_id),
constraint ccsr_parts_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc(namc_id)

);


--67. STKRRID  ccsr_requests   
create table if not exists tmm.ccsr_requests(
request_id varchar(25) not null,
namc_id char(2) not null,
userid varchar(25),
token char(40),
req_timestamp timestamp,
resp_timestamp timestamp,
request_type char(1) not null,
status char(1) default 'n' not null,
last_action char(6) default 'create' not null,
request_name varchar(25),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsr_requests_pk primary key (request_id),
constraint ccsr_requests_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc(namc_id)
);


--68. STKRREQ  ccsr_request_details
create table if not exists tmm.ccsr_request_details(
request_rec_id integer generated by default as identity,
request_id varchar(25) not null,
part_id integer not null,
plant_id char(2),
cycle_no char(2),
vehicles_lined_off integer,
total_vehicles integer,
body_no char(5),
inv_count integer,
lastorderno char(12),
bus_enty_cd char(2),
order_cycle_end_date date,
vehicles_remaining integer,
counter_check char(1) default 'n',
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsr_request_details_pk primary key (request_rec_id),
constraint ccsr_request_details_ccsr_requests_fk foreign key (request_id) references tmm.ccsr_requests(request_id),
constraint ccsr_request_details_ccsr_parts_fk foreign key (part_id) references tmm.ccsr_parts(part_id)
);


--69. STKRDRT  ccsr_routes
create table if not exists tmm.ccsr_routes (
rdn_route_id integer generated by default as identity,
request_id varchar(25) not null,
dock char(2) not null,
route varchar(6) not null,
unload_date varchar(8),
mr_seq varchar(2),
mr_frequency integer,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsr_routes_pk primary key (rdn_route_id),
constraint ccsr_routes_ccsr_requests_fk foreign key (request_id) references tmm.ccsr_requests(request_id)
);


--70. STKRRST  ccsr_results
create table if not exists tmm.ccsr_results(
result_id integer generated by default as identity,
part_id integer not null,
order_no char(12),
mros char(2),
order_plan integer,
basic_req integer,
adjustment integer,
starting_inventory integer,
ending_inventory integer,
hotcall_pick_qty integer,
min_inv_qty integer,
max_inv_qty integer,
fr_capacity integer,
mr_frequency char(2),
internal_safety integer,
last_request_id varchar(25),
taps integer,
import_taps integer default 0 not null,
exp_suppl_flg char(1),
total_requirement integer,
total_amount integer,
gap integer,
ending_carryover integer,
ending_scrap_carryover integer,
import_adjustment integer default 0 not null,
order_delv_flg char(25) default 'N' not null,
order_date varchar(8),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsr_results_ccsr_parts_fk foreign key (part_id) references tmm.ccsr_parts(part_id),
constraint ccsr_results_ccsr_requests_fk foreign key (last_request_id) references tmm.ccsr_requests(request_id)
);


--71. STKCTIS  ccsr_counter_info_setup
create table if not exists tmm.ccsr_counter_info_setup(
counterinfo_id integer generated by default as identity,
namc_id char(2) not null,
counter_id integer not null,
counter_name varchar(50) not null,
dock char(2) not null,
deleted_by varchar(100), 
delete_timestamp timestamp,
counter_type integer not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccsr_counter_info_setup_pk primary key (counterinfo_id),
constraint ccsr_counter_info_setup_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc(namc_id)
);

create unique index ccsr_counter_info_setup_idx2 on tmm.ccsr_counter_info_setup (dock);

CREATE UNIQUE INDEX tmm.ccsr_parts_namc_id_idx ON tmm.ccsr_parts (namc_id,dock,supplier,part_no,kanban);

----------------  RUNDOWN TABLES - END ----------------------------


----------- TABLES CONTAINING USER ROLE - ACCESS MAPPING DATA - START --------------

--72. ccs_modules
create table if not exists tmm.ccs_modules(
module_id integer not null unique,
name varchar(10),
description varchar(20),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccs_modules_pk primary key(module_id)
);


--73. ccs_actions
create table if not exists tmm.ccs_actions(
action_id integer not null unique,
module_id integer not null,
menu_item varchar(20),
screen varchar(50),
function varchar(50),
sub_function varchar(50),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccs_actions_pk primary key(action_id),
constraint ccs_actions_ccs_modules_fk foreign key (module_id) references tmm.ccs_modules (module_id)
);


--74. ccs_access_type
create table if not exists tmm.ccs_access_type(
access_type_id integer not null unique,
name varchar(20)not null,
description varchar(30) not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccs_access_type_pk primary key(access_type_id)
);


--75. ccs_roles
create table if not exists tmm.ccs_roles(
role_id integer not null unique,
module_id integer not null,
name varchar(20),
description varchar(50),
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccs_roles_pk primary key(role_id),
constraint ccs_roles_ccs_modules_fk foreign key (module_id) references tmm.ccs_modules (module_id)
);


--76. ccs_role_action_access_map
create table if not exists tmm.ccs_role_action_access_map(
action_id integer not null,
access_type_id integer not null,
role_id integer not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
constraint ccs_role_action_access_map_pk primary key (action_id,access_type_id,role_id),
constraint ccs_role_action_access_map_ccs_actions_fk foreign key (action_id) references tmm.ccs_actions (action_id),
constraint ccs_role_action_access_map_ccs_access_type_fk foreign key (access_type_id) references tmm.ccs_access_type (access_type_id),
constraint ccs_role_action_access_map_ccs_roles_fk foreign key (role_id) references tmm.ccs_roles (role_id)
);
  
------------ TABLES CONTAINING USER ROLE - ACCESS MAPPING DATA - END ---------------

-------------------------- PARTS MASTER TABLES - START -----------------------------

--77. PRUDESC
CREATE TABLE if not exists TMM.PRUDESC (
	BUSINESS_ENTITY CHAR(2) NOT NULL,
	ITEMID CHAR(12) NOT NULL,
	DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	USERID CHAR(8),
	KANBAN CHAR(12),
	DESCRIPTION CHAR(40),
	TMM_SPEC CHAR(40),
	SUPPLIER_SPEC CHAR(40),
	UNIT_MEASURE CHAR(5),
	STATUS CHAR(1),
	"SOURCE" CHAR(1),
	MAKER CHAR(10),
	HMC CHAR(4),
	USER_FLAGS CHAR(12),
	OBSOLETE_DATE DATE,
	COMMENTS VARCHAR(40),
	MAJOR_HAZ_CODE CHAR(1),
	VEHICLE_CODE CHAR(5),
	LAST_ECI CHAR(10),
	MATERIAL_CLASS CHAR(4),
    	CONSTRAINT PRUDESC_PK PRIMARY KEY (BUSINESS_ENTITY,ITEMID)
);


--78. PRUKANB
CREATE TABLE if not exists TMM.PRUKANB (
	BUSINESS_ENTITY CHAR(2) NOT NULL,
	"TYPE" CHAR(2) NOT NULL,
	CSI_TYPE CHAR(2) NOT NULL,
	CUSTOMER_SUPP CHAR(7) NOT NULL,
	LOCATION CHAR(12) NOT NULL,
	ITEMID CHAR(12) NOT NULL,
	EFF_START DATE NOT NULL,
	DATETIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	USERID CHAR(8) NULL,
	EFF_STOP DATE,
	SHARE DECIMAL(7,4),
	ROUTE_PRIM CHAR(5),
	ROUTE_SEC CHAR(5),
	LINE_GROUP CHAR(5),
	PACKING_STYLE CHAR(10),
	ORDER_METHOD CHAR(1),
	KANBAN_COEFF DECIMAL(7,4),
	LOT_QUANTITY INTEGER,
	KANBAN CHAR(4),
	COMMUNICATION_CODE CHAR(5),
	STORE_ADDRESS_PRIM CHAR(10),
	STORE_ADDRESS_SEC CHAR(10),
	SAFETY_RATIO DECIMAL(7,4),
	EMPLOYEE CHAR(5),
	RESPONSIBLE_USER CHAR(5),
	PACKAGING_CODE CHAR(3),
	CONTAINER_CODE CHAR(2),
	MINIMUM_LOT_COUNT INTEGER,
	LIFE_CYCLE CHAR(1),
	MIN_INV_QUANTITY INTEGER,
	MAX_INV_QUANTITY INTEGER,
	FLOWRACK_NUMBER CHAR(10),
	SHIPPING_LOCATION CHAR(10),
	VENDOR_SHARE_TYPE CHAR(2),
	VENDOR_SHARE DECIMAL(15,4),
	CATEGORY CHAR(8),
	DELIVERY_EMPTY_CAPACITY INTEGER,
	ATTACH_DEPTH_ADDRESS CHAR(10),
	CAPACITY_ADD_TYPE VARCHAR(15),
		CONSTRAINT PRUKANB_PK PRIMARY KEY (BUSINESS_ENTITY,"TYPE",CSI_TYPE,CUSTOMER_SUPP,LOCATION,ITEMID,EFF_START),
	CONSTRAINT PRUKANB_PRUDESC_FK FOREIGN KEY (BUSINESS_ENTITY,ITEMID) REFERENCES TMM.PRUDESC(BUSINESS_ENTITY,ITEMID) ON DELETE RESTRICT
);

CREATE INDEX PRUKANB_IX1 ON TMM.PRUKANB ("TYPE",ITEMID,LOCATION,CUSTOMER_SUPP);
CREATE INDEX PRUKANB_IX2 ON TMM.PRUKANB (EFF_STOP);
CREATE INDEX PRUKANB_IX3 ON TMM.PRUKANB (LOCATION);
CREATE INDEX PRUKANB_IX4 ON TMM.PRUKANB (LIFE_CYCLE);
CREATE INDEX PRUKANB_IX5 ON TMM.PRUKANB (LOT_QUANTITY);
CREATE INDEX PRUKANB_IX6 ON TMM.PRUKANB (EMPLOYEE);
CREATE INDEX PRUKANB_IX7 ON TMM.PRUKANB (KANBAN);
CREATE INDEX PRUKANB_IX8 ON TMM.PRUKANB (CONTAINER_CODE);
CREATE INDEX PRUXAN2 ON TMM.PRUKANB (BUSINESS_ENTITY,ITEMID,"TYPE",CSI_TYPE,CUSTOMER_SUPP);

--------------------------- PARTS MASTER TABLES - END ------------------------------

--------------------------- NA PIPELINE TABLES - START -----------------------------

--79. PURLGST
CREATE TABLE if not exists TMM.PURLGST (
	COMPANY CHAR(5) NOT NULL,
	SUPPLIER CHAR(7) NOT NULL,
	DOCK CHAR(2) NOT NULL,
	ORDER_NUMBER CHAR(12) NOT NULL,
	TRACK_SEQ CHAR(2) NOT NULL,
	BUSINESS_ENTITY CHAR(2) NOT NULL,
	MROS CHAR(2),
	ROUTE_NO CHAR(6),
	LOGISTIC_FLAG CHAR(2),
	CONSTRAINT PURLGST_PK PRIMARY KEY (COMPANY,SUPPLIER,DOCK,ORDER_NUMBER,TRACK_SEQ,BUSINESS_ENTITY)
) PARTITION BY LIST (BUSINESS_ENTITY);

CREATE INDEX PURLGST_IX1 ON TMM.PURLGST (ORDER_NUMBER);
CREATE INDEX PURLGST_IX2 ON TMM.PURLGST (DOCK);
CREATE INDEX PURLGST_IX3 ON TMM.PURLGST (ROUTE_NO);
CREATE INDEX PURLGST_IX4 ON TMM.PURLGST (MROS);
CREATE INDEX PURXGST1 ON TMM.PURLGST (SUPPLIER,DOCK,ORDER_NUMBER,LOGISTIC_FLAG);

-- PURLGST PARTITIONS
CREATE TABLE TMM.PURLGST_TMMK PARTITION OF TMM.PURLGST FOR VALUES IN ('01');
CREATE TABLE TMM.PURLGST_TMMI PARTITION OF TMM.PURLGST FOR VALUES IN ('02');
CREATE TABLE TMM.PURLGST_TMMTX PARTITION OF TMM.PURLGST FOR VALUES IN ('03');
CREATE TABLE TMM.PURLGST_TMMMS PARTITION OF TMM.PURLGST FOR VALUES IN ('04');
CREATE TABLE TMM.PURLGST_TMMWV PARTITION OF TMM.PURLGST FOR VALUES IN ('14');
CREATE TABLE TMM.PURLGST_TMMAL PARTITION OF TMM.PURLGST FOR VALUES IN ('15');
CREATE TABLE TMM.PURLGST_TMMBC PARTITION OF TMM.PURLGST FOR VALUES IN ('20');
CREATE TABLE TMM.PURLGST_TMMGT PARTITION OF TMM.PURLGST FOR VALUES IN ('25');
CREATE TABLE TMM.PURLGST_MTMUS PARTITION OF TMM.PURLGST FOR VALUES IN ('26');


--80. PURORDR
CREATE TABLE if not exists TMM.PURORDR (
	INTERNAL_ORD CHAR(8) NOT NULL,
	BUSINESS_ENTITY CHAR(2) NOT NULL,
	SUPPLIER CHAR(7) NOT NULL,
	EXT_ORDER_NUMBER CHAR(12),
   	CONSTRAINT PURORDR_PK PRIMARY KEY (INTERNAL_ORD,BUSINESS_ENTITY)
) PARTITION BY LIST (BUSINESS_ENTITY);

CREATE INDEX PURORDR_IX1 ON TMM.PURORDR (SUPPLIER);
CREATE INDEX PURORDR_IX2 ON TMM.PURORDR (EXT_ORDER_NUMBER);

-- PURORDR PARTITIONS
CREATE TABLE TMM.PURORDR_TMMK PARTITION OF TMM.PURORDR FOR VALUES IN ('01');
CREATE TABLE TMM.PURORDR_TMMI PARTITION OF TMM.PURORDR FOR VALUES IN ('02');
CREATE TABLE TMM.PURORDR_TMMTX PARTITION OF TMM.PURORDR FOR VALUES IN ('03');
CREATE TABLE TMM.PURORDR_TMMMS PARTITION OF TMM.PURORDR FOR VALUES IN ('04');
CREATE TABLE TMM.PURORDR_TMMWV PARTITION OF TMM.PURORDR FOR VALUES IN ('14');
CREATE TABLE TMM.PURORDR_TMMAL PARTITION OF TMM.PURORDR FOR VALUES IN ('15');
CREATE TABLE TMM.PURORDR_TMMBC PARTITION OF TMM.PURORDR FOR VALUES IN ('20');
CREATE TABLE TMM.PURORDR_TMMGT PARTITION OF TMM.PURORDR FOR VALUES IN ('25');
CREATE TABLE TMM.PURORDR_MTMUS PARTITION OF TMM.PURORDR FOR VALUES IN ('26');


--81. PURITEM
CREATE TABLE if not exists TMM.PURITEM (
	INTERNAL_ORD CHAR(8) NOT NULL,
	"SEQUENCE" CHAR(4) NOT NULL,
	BUSINESS_ENTITY CHAR(2) NOT NULL,
	SUPPLIER CHAR(7) NOT NULL,
	ORDER_NUMBER CHAR(12) NOT NULL,
	ITEMID CHAR(12),
	ORDER_QUANTITY INTEGER,
	DELV_DOCK CHAR(2),
	STATUS CHAR(8),
	REVISED_ORDER_QTY INTEGER,
	PLANNED_UNLOAD_DT TIMESTAMP,
	UNLOAD_STATUS CHAR(8),
	CONSTRAINT PURITEM_PK PRIMARY KEY (INTERNAL_ORD,"SEQUENCE",BUSINESS_ENTITY),
	CONSTRAINT PURITEM_PURORDR_FK FOREIGN KEY (INTERNAL_ORD,BUSINESS_ENTITY) REFERENCES TMM.PURORDR(INTERNAL_ORD,BUSINESS_ENTITY) ON DELETE CASCADE
) PARTITION BY LIST (BUSINESS_ENTITY);

CREATE INDEX PURITEM_IX1 ON TMM.PURITEM (ITEMID);
CREATE INDEX PURITEM_IX2 ON TMM.PURITEM (ITEMID,SUPPLIER);
CREATE INDEX PURITEM_IX3 ON TMM.PURITEM (STATUS,INTERNAL_ORD);
CREATE INDEX PURITEM_IX4 on TMM.PURITEM (INTERNAL_ORD,BUSINESS_ENTITY);
CREATE INDEX PURITEM_IX5 on TMM.PURITEM (DELV_DOCK);

-- PURITEM PARTITIONS
CREATE TABLE TMM.PURITEM_TMMK PARTITION OF TMM.PURITEM FOR VALUES IN ('01');
CREATE TABLE TMM.PURITEM_TMMI PARTITION OF TMM.PURITEM FOR VALUES IN ('02');
CREATE TABLE TMM.PURITEM_TMMTX PARTITION OF TMM.PURITEM FOR VALUES IN ('03');
CREATE TABLE TMM.PURITEM_TMMMS PARTITION OF TMM.PURITEM FOR VALUES IN ('04');
CREATE TABLE TMM.PURITEM_TMMWV PARTITION OF TMM.PURITEM FOR VALUES IN ('14');
CREATE TABLE TMM.PURITEM_TMMAL PARTITION OF TMM.PURITEM FOR VALUES IN ('15');
CREATE TABLE TMM.PURITEM_TMMBC PARTITION OF TMM.PURITEM FOR VALUES IN ('20');
CREATE TABLE TMM.PURITEM_TMMGT PARTITION OF TMM.PURITEM FOR VALUES IN ('25');
CREATE TABLE TMM.PURITEM_MTMUS PARTITION OF TMM.PURITEM FOR VALUES IN ('26');

--------------------------- NA PIPELINE TABLES - END -------------------------------

---------------------------- BATCH JOB TABLES - START -------------------------------

--82. ccsb_batch_files
create table if not exists tmm.ccsb_batch_files(
file_id integer,
namc_id char(2) not null, 
job_code char(30) not null,
name varchar(40) not null, 
delimiter char(1), 
inserted_by varchar(25) default 'system' not null, 
insert_timestamp timestamp default current_timestamp not null, 
last_updated_by varchar(25), 
last_update_timestamp timestamp, 
deleted_by varchar(100), 
delete_timestamp timestamp, 
file_received_status char(1),
line_number char(2),
constraint ccsb_batch_files_pk primary key(file_id),
constraint ccsb_batch_files_ccsb_jobs_fk foreign key (job_code) references tmm.ccsb_jobs(job_code)
);


--83. ccsb_batch_file_field_column_map
create table if not exists tmm.ccsb_batch_file_field_column_map(
map_id integer generated by default as identity, 
file_id integer not  null, 
field_sequence_no integer not null, 
source_table varchar(20) not null, 
source_column varchar(20) not null, 
target_table varchar(40) not null, 
target_column varchar(20) not null,
target_column_data_type varchar(20) not null, 
inserted_by varchar(25) default 'system' not null, 
insert_timestamp timestamp default current_timestamp not null, 
last_updated_by varchar(25), 
last_update_timestamp timestamp,
constraint ccsb_batch_file_field_column_map_pk primary key(map_id),
constraint ccsb_batch_file_field_column_map_ccsb_batch_files_fk foreign key (file_id) references tmm.ccsb_batch_files (file_id)
);


--84. ccsb_unprocessed_data_files
create table if not exists tmm.ccsb_unprocessed_data_files (
id integer generated by default as identity,
namc_id char(2) not null, 
job_code char(30) not null,
line_number char(2),
unprocessed_file_location varchar(100) not null,
processed_file_location varchar(100),
processed_flag char(1) default 'N' not null,
inserted_by varchar(25) default 'system' not null,
insert_timestamp timestamp default current_timestamp not null,
last_updated_by varchar(25),
last_update_timestamp timestamp,
current_status varchar(30) default 'ACTIVE' not null,
constraint ccsb_unprocessed_data_files_pk primary key (id),
constraint ccsb_unprocessed_data_files_ccsb_namc_fk foreign key (namc_id) references tmm.ccsb_namc (namc_id),
constraint ccsb_unprocessed_data_files_ccsb_job_status_codes_fk foreign key (current_status) references tmm.ccsb_job_status_codes (status_code),
constraint ccsb_unprocessed_data_files_ccsb_jobs_fk foreign key (job_code) references tmm.ccsb_jobs (job_code)
);

---------------------------- BATCH JOB TABLES - END ------------------------------

------------------------------ VIEWS - START ---------------------------------------

--1. STKDKRM
 CREATE MATERIALIZED VIEW IF NOT EXISTS TMM.STKDKRM (BUSINESS_ENTITY, SUPPLIER, FULL_SUPPLIER, DOCK, ROUTE)  
      AS (                                                             
    SELECT  BUSINESS_ENTITY,SUPPLIER, FULL_SUPPLIER, T1.DOCK, ROUTE                     
      FROM (SELECT BUSINESS_ENTITY,LTRIM(TMM.PURLGST.SUPPLIER) AS SUPPLIER,        
                   CONCAT('00', LTRIM(TMM.PURLGST.SUPPLIER)) AS    
                   FULL_SUPPLIER, TMM.PURLGST.DOCK,                
                   SUBSTR(TMM.PURLGST.ROUTE_NO, 1, LENGTH(RTRIM(   
                   TMM.PURLGST.ROUTE_NO)) - 2) AS ROUTE            
              FROM TMM.PURLGST                                     
              WHERE TMM.PURLGST.LOGISTIC_FLAG = '9A') T1           
      GROUP BY  BUSINESS_ENTITY,SUPPLIER, FULL_SUPPLIER, T1.DOCK, ROUTE);

	  
--2. STKLGSM
  CREATE MATERIALIZED VIEW IF NOT EXISTS TMM.STKLGSM (                                       
      BUSINESS_ENTITY, SUPPLIER, FULL_SUPPLIER, DOCK, ROUTE, ROUTE_NO, ORDER_NUMBER,    
      UNLD_DATE, MROS, MAXMROS) AS (                                   
    SELECT T1.BUSINESS_ENTITY,T1.SUPPLIER, CONCAT('00', T1.SUPPLIER) AS FULL_SUPPLIER,    
           T1.DOCK, T1.ROUTE, T1.ROUTE_NO, T1.ORDER_NUMBER,            
           T1.UNLD_DATE, T1.MROS, T3.MAXMROS                           
      FROM (SELECT BUSINESS_ENTITY,LTRIM(SUPPLIER) AS SUPPLIER, DOCK, ROUTE_NO,        
                   SUBSTR(ROUTE_NO, 1, LENGTH(RTRIM(ROUTE_NO)) - 2)    
                   AS ROUTE, ORDER_NUMBER,                             
                   SUBSTR(ORDER_NUMBER, 1, 8) AS UNLD_DATE, MROS       
              FROM (SELECT BUSINESS_ENTITY,SUPPLIER, DOCK, ROUTE_NO, ORDER_NUMBER,     
                           MROS                                        
                      FROM (SELECT BUSINESS_ENTITY,SUPPLIER, DOCK, ROUTE_NO,           
                                 ORDER_NUMBER, MROS                   
                            FROM TMM.PURLGST                      
                            WHERE LOGISTIC_FLAG = '9A') PURLGST       
                    GROUP BY                                          
                       BUSINESS_ENTITY,SUPPLIER, DOCK, ROUTE_NO, ORDER_NUMBER, MROS   
                 ) GRP                                                
            WHERE LENGTH(LTRIM(RTRIM(ORDER_NUMBER))) = 10) T1         
JOIN(SELECT BUSINESS_ENTITY,DOCK, ROUTE, MAX(MROS) AS MAXMROS                         
       FROM (SELECT BUSINESS_ENTITY,DOCK,                                             
                    SUBSTR(ROUTE_NO, 1, LENGTH(RTRIM(ROUTE_NO)) - 2   
                    ) AS ROUTE, MROS                                  
               FROM TMM.PURLGST                                   
               WHERE LOGISTIC_FLAG = '9A') T2                         
       GROUP BY BUSINESS_ENTITY,DOCK, ROUTE) T3                                       
 ON T1.DOCK = T3.DOCK AND T1.ROUTE = T3.ROUTE  AND T1.BUSINESS_ENTITY=T3.BUSINESS_ENTITY                       
 );                           

CREATE INDEX IF NOT EXISTS STKLGSM_IX1 ON TMM.STKLGSM (business_entity, supplier, dock, order_number);
CREATE INDEX IF NOT EXISTS STKLGSM_IX2 ON tmm.stklgsm (full_supplier, route, unld_date, mros);


--3. STKMXRM	
  CREATE MATERIALIZED VIEW IF NOT EXISTS TMM.STKMXRM (BUSINESS_ENTITY, DOCK, ROUTE, MAXMROS) AS (           
    SELECT BUSINESS_ENTITY, DOCK, ROUTE, MAX(MROS) AS MAXMROS                         
      FROM (SELECT BUSINESS_ENTITY,DOCK,                                             
                   SUBSTR(ROUTE_NO, 1, LENGTH(RTRIM(ROUTE_NO)) - 2)  
                   AS ROUTE, MROS                                    
              FROM TMM.PURLGST                                   
              WHERE LOGISTIC_FLAG = '9A') T1                         
      GROUP BY BUSINESS_ENTITY,DOCK, ROUTE) ;                                         

                     
--4. STKPRUM 
CREATE MATERIALIZED VIEW  IF NOT EXISTS TMM.STKPRUM (                                      
     EFF_START,MIN_INV_QUANTITY ,MAX_INV_QUANTITY ,BUSINESS_ENTITY, KANBAN, DOCK, SUPPLIER, PART_NO, FAMILY_PART, LSA, LSA_NO_DOCK, 
     QPC, TEAM_MEMBER, STORE, ORDER_METHOD, DEL_ROUTE_PRIM,          
     DEL_ROUTE_SEC, LINE_GROUP, CONTAINER_CODE, EFF_STOP, LIFE_CYCLE 
     , VENDOR_SHARE, PART_DESCRIPTION) AS (                          
   SELECT P.EFF_START,P.MIN_INV_QUANTITY ,P.MAX_INV_QUANTITY ,P.BUSINESS_ENTITY, P.KANBAN, P.DOCK, P.SUPPLIER, P.PART_NO, P.FAMILY_PART,    
          P.LSA, P.LSA_NO_DOCK, P.QPC, P.TEAM_MEMBER, P.STORE,       
          P.ORDER_METHOD, P.DEL_ROUTE_PRIM, P.DEL_ROUTE_SEC,         
          P.LINE_GROUP, P.CONTAINER_CODE, P.EFF_STOP, P.LIFE_CYCLE,  
          P.VENDOR_SHARE, PD.DESCRIPTION AS PART_DESCRIPTION         
     FROM (SELECT LT1.EFF_START,LT1.MIN_INV_QUANTITY ,LT1.MAX_INV_QUANTITY ,LT1.BUSINESS_ENTITY, LT1.KANBAN, LT1.DOCK, LT1.SUPPLIER, LT1.PART_NO,   
                  FAMILY_PART, COALESCE(LT2.LSA, '') AS LSA,         
                  COALESCE(SUBSTR(LT2.LSA, 3, (LENGTH(LT2.LSA) - 2)) 
                , '') AS LSA_NO_DOCK, LT1.QPC, LT1.TEAM_MEMBER,     
                LT2.STORE, LT1.ORDER_METHOD, LT2.DEL_ROUTE_PRIM,    
                LT2.DEL_ROUTE_SEC, LT2.LINE_GROUP,                  
                LT1.CONTAINER_CODE, LT1.EFF_STOP, LT1.LIFE_CYCLE,   
                LT1.VENDOR_SHARE                                    
           FROM (SELECT PRUKANB.EFF_START,PRUKANB.MIN_INV_QUANTITY ,PRUKANB.MAX_INV_QUANTITY ,PRUKANB.BUSINESS_ENTITY,
                        PRUKANB.ITEMID AS PART_NO,                  
                        SUBSTR(PRUKANB.ITEMID, 1, 10) AS            
                        FAMILY_PART, PRUKANB.KANBAN,                
                        PRUKANB.LOCATION AS DOCK,                   
                        PRUKANB.LOT_QUANTITY AS QPC,                
                        PRUKANB.EMPLOYEE AS TEAM_MEMBER,            
                        PRUKANB.ORDER_METHOD,                       
                        PRUKANB.CUSTOMER_SUPP AS SUPPLIER,          
                        PRUKANB.CONTAINER_CODE, PRUKANB.EFF_STOP,   
                        PRUKANB.LIFE_CYCLE, PRUKANB.VENDOR_SHARE    
                   FROM TMM.PRUKANB AS PRUKANB                  
                   WHERE PRUKANB."TYPE" = 'CD'                     
                     AND (PRUKANB.EFF_START IS NULL                
                      OR PRUKANB.EFF_START <= CURRENT_DATE)        
                     AND (PRUKANB.EFF_STOP IS NULL                 
                      OR PRUKANB.EFF_STOP >= CURRENT_DATE)) LT1    
                LEFT JOIN                                          
        (SELECT TMM.PRUKANB.EFF_START,TMM.PRUKANB.MIN_INV_QUANTITY ,
		TMM.PRUKANB.MAX_INV_QUANTITY ,TMM.PRUKANB.BUSINESS_ENTITY,
                TMM.PRUKANB.CUSTOMER_SUPP,                     
                TMM.PRUKANB.ITEMID,                            
                TMM.PRUKANB.LOCATION AS LSA,                   
                TMM.PRUKANB.STORE_ADDRESS_PRIM AS STORE,       
                TMM.PRUKANB.ROUTE_PRIM AS DEL_ROUTE_PRIM,      
                TMM.PRUKANB.ROUTE_SEC AS DEL_ROUTE_SEC,        
                TMM.PRUKANB.LINE_GROUP                         
           FROM TMM.PRUKANB                                    
           WHERE TMM.PRUKANB."TYPE" = 'CL'                     
             AND (TMM.PRUKANB.EFF_START IS NULL                
                OR TMM.PRUKANB.EFF_START <= CURRENT_DATE)         
               AND (TMM.PRUKANB.EFF_STOP IS NULL                  
                OR TMM.PRUKANB.EFF_STOP >= CURRENT_DATE)) LT2     
          ON LT1.PART_NO = LT2.ITEMID AND LT1.SUPPLIER = LT2.         
          CUSTOMER_SUPP AND LT1.BUSINESS_ENTITY=LT2.BUSINESS_ENTITY AND LT1.DOCK = SUBSTR(LT2.LSA, 1, 2))         
 P, TMM.PRUDESC PD WHERE P.PART_NO = PD.ITEMID AND P.BUSINESS_ENTITY=PD.BUSINESS_ENTITY                    
  ) ; 

-------------------------------- VIEWS - END ---------------------------------------

------------------------------ FUNCTIONS - START ---------------------------------------
--1. ccsb_inventory_sp4
CREATE OR REPLACE FUNCTION tmm.ccsb_inventory_sp4(namcid text, invid integer)
 RETURNS TABLE(partselectionid integer, inventorygroupname character varying, cpinvgroup text, teammember character varying, kanbanpart character varying, dockpart character varying, supplierpart character varying, partno character varying, qpcpart integer, partdescription character varying, storepart character varying, lsapart character varying, otheraddress1 character varying, otheraddress2 character varying, otheraddress3 character varying, otheraddress4 character varying, otheraddress5 character varying, otheraddress6 character varying, otheraddress7 character varying, otheraddress8 character varying, delrouteprim character varying, delroutesec character varying, linegroup character varying, containercode character varying, newparts character, ordermethod character varying, rankpart character varying, invaudit character, otheraddr character varying, bodynorequired character, inventorycountreq character, storegroup character, lsagroup character, otherflaggroup character, otheraddrflag1 character, otheraddrflag2 character, otheraddrflag3 character, otheraddrflag4 character, otheraddrflag5 character, otheraddrflag6 character, otheraddrflag7 character, otheraddrflag8 character, otheraddressindex integer, partsperpage integer, editablerecordflag integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY 
select
x2.part_selection_id   
,x2.inventory_group_name
,x2.cp_inv_group        
,x2.team_member         
,x2.kanban              
,x2.dock                
,x2.supplier            
,x2.part_no             
,x2.qpc                 
,x2.part_description    
,x2.storepart               
,x2.lsapart                 
,x2.other_address_1     
,x2.other_address_2     
,x2.other_address_3     
,x2.other_address_4     
,x2.other_address_5     
,x2.other_address_6     
,x2.other_address_7     
,x2.other_address_8     
,x2.del_route_prim      
,x2.del_route_sec       
,x2.line_group          
,x2.container_code      
,x2.new_parts           
,x2.order_method        
,x2."rank"                
,x2.audit           
,x2.other               
,x2.bodyno_required     
,x2.inventory_count_req 
,x2.storegroup               
,x2.lsagroup                 
,x2.otherflag           
,x2.other_adr1          
,x2.other_adr2          
,x2.other_adr3          
,x2.other_adr4          
,x2.other_adr5          
,x2.other_adr6          
,x2.other_adr7          
,x2.other_adr8          
,x2.otheradridx         
,x2.parts_per_page      
,x2.editablerecord      
from 
(select x1.* 
,case 
when x1.cp_Inv_Group='Missing' then row_number() over (partition by x1.part_selection_id, x1.inventory_group_name order by x1.part_selection_id, x1.inventory_group_name, x1.otheradridx) else 0 
end as rownum from 
(select
t1.part_selection_id 
,coalesce(t2.inventory_group_name, 'UnAssigned') as inventory_group_name
,case 
when t2.store='Y' and t1.store is null then 'Missing'    
when t2.lsa='Y' and (t1.lsa is null or t1.lsa = '') then 'Missing'
when t2.other_adr1='Y' and t1.other_address_1 is null then 'Missing'
when t2.other_adr2='Y' and t1.other_address_2 is null then 'Missing'
when t2.other_adr3='Y' and t1.other_address_3 is null then 'Missing'
when t2.other_adr4='Y' and t1.other_address_4 is null then 'Missing'
when t2.other_adr5='Y' and t1.other_address_5 is null then 'Missing'
when t2.other_adr6='Y' and t1.other_address_6 is null then 'Missing'
when t2.other_adr7='Y' and t1.other_address_7 is null then 'Missing'
when t2.other_adr8='Y' and t1.other_address_8 is null then 'Missing'
else ' '
end as cp_Inv_Group
,t1.team_member 
,t1.kanban 
,t1.dock::character varying
,t1.supplier 
,t1.part_no 
,t1.qpc 
,t1.part_description 
,t1.store as storepart
,t1.lsa as lsapart
,t1.other_address_1 
,t1.other_address_2 
,t1.other_address_3
,t1.other_address_4
,t1.other_address_5
,t1.other_address_6
,t1.other_address_7
,t1.other_address_8 
,t1.del_route_prim 
,t1.del_route_sec 
,t1.line_group 
,t1.container_code 
,t1.new_parts 
,t1.order_method 
,t7."rank" 
,t7.audit 
,t5.other
,t2.bodyno_required 
,t2.inventory_count_req 
,t2.store as storegroup
,t2.lsa  as lsagroup
,t6.otherFlag
,t2.other_adr1 
,t2.other_adr2 
,t2.other_adr3 
,t2.other_adr4 
,t2.other_adr5 
,t2.other_adr6 
,t2.other_adr7 
,t2.other_adr8 
,t5.otherAdrIdx
,t2.parts_per_page
,case 
	when t6.otherflag = 'Y' or t2.store = 'Y' or t2.lsa = 'Y' then  1
	else 0
end as editableRecord 
from tmm.ccsb_inventory_parts t1 
left join tmm.ccsb_inventory_group_part_map t3 on t1.part_selection_id =t3.part_selection_id
left join tmm.ccsb_inventory_groups t2 on t2.inventory_group_id =t3.inventory_group_id and t2.deleted_by is null and t2.namc_id =namcid
left join 
(select inventory_group_id, inventory_group_name, 1 as otherAdrIdx, other_adr1 as otherFlag from tmm.ccsb_inventory_groups where other_adr1='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 2 as otherAdrIdx, other_adr2 as otherFlag from tmm.ccsb_inventory_groups where other_adr2='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 3 as otherAdrIdx, other_adr3 as otherFlag from tmm.ccsb_inventory_groups where other_adr3='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 4 as otherAdrIdx, other_adr4 as otherFlag from tmm.ccsb_inventory_groups where other_adr4='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 5 as otherAdrIdx, other_adr5 as otherFlag from tmm.ccsb_inventory_groups where other_adr5='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 6 as otherAdrIdx, other_adr6 as otherFlag from tmm.ccsb_inventory_groups where other_adr6='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 7 as otherAdrIdx, other_adr7 as otherFlag from tmm.ccsb_inventory_groups where other_adr7='Y' and deleted_by is null union all
select inventory_group_id, inventory_group_name, 8 as otherAdrIdx, other_adr8 as otherFlag from tmm.ccsb_inventory_groups where other_adr8='Y' and deleted_by is null 
)t6 on t6.inventory_group_id=t2.inventory_group_id
left join
(select part_selection_id, 1 as otherAdrIdx, other_address_1 as other from tmm.ccsb_inventory_parts where other_address_1 is not null and deleted_by is null union all
select part_selection_id, 2 as otherAdrIdx, other_address_2 as other from tmm.ccsb_inventory_parts where other_address_2 is not null and deleted_by is null union all
select part_selection_id, 3 as otherAdrIdx, other_address_3 as other from tmm.ccsb_inventory_parts where other_address_3 is not null and deleted_by is null union all
select part_selection_id, 4 as otherAdrIdx, other_address_4 as other from tmm.ccsb_inventory_parts where other_address_4 is not null and deleted_by is null union all
select part_selection_id, 5 as otherAdrIdx, other_address_5 as other from tmm.ccsb_inventory_parts where other_address_5 is not null and deleted_by is null union all
select part_selection_id, 6 as otherAdrIdx, other_address_6 as other from tmm.ccsb_inventory_parts where other_address_6 is not null and deleted_by is null union all
select part_selection_id, 7 as otherAdrIdx, other_address_7 as other from tmm.ccsb_inventory_parts where other_address_7 is not null and deleted_by is null union all
select part_selection_id, 8 as otherAdrIdx, other_address_8 as other from tmm.ccsb_inventory_parts where other_address_8 is not null and deleted_by is null 
)t5 on t5.part_selection_id=t1.part_selection_id  and t5.otherAdrIdx=t6.otherAdrIdx
left join 
tmm.ccsb_global_safety_repository t7 on t7.kanban = t1.kanban and t7.dock =t1.dock and t7.supplier =t1.supplier and t2.namc_id =t7.namc_id and t7.part =t1.part_no
where not exists 
(select * from tmm.ccsb_parts_selection_calc t4 where t4.part_selection_id =t1.part_selection_id and t4.inventory_id =t1.inventory_id and t4.inv_group_name =t2.inventory_group_name and t4.other=t5.other AND t4.other_adr_index=t5.otherAdrIdx)
and t1.inventory_id = invid
and t1.deleted_by is null 
and t7.deleted_by is null)x1)x2
where rownum<=1;
END;
$function$
;

------------------------------ FUNCTIONS - END ---------------------------------------
